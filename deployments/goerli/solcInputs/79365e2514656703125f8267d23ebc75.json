{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//get funds from users\n// withdraw funds\n// set a minimum funding value in usd\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // matching values with conversion and getprice\n\n    address[] public funders; // keep track of all funds we get\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress){\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress); \n    }\n\n    function fund() public payable {\n        // want to be able to set a min fund amt in usd\n        //1. how do we send eth to this contract?\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"didnt send enough\"); //=1eth in wei\n        // 18 decimal places\n        //above message reverts the error if occured\n        //what is reverting?\n        //undo any action before, and send remaining gas \n        funders.push(msg.sender); //adds address(public address) of funders to the array\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // require(msg.sender == owner, \"sender is not owner\");\n\n        /* starting index, ending index, step amount */\n        for( uint256 funderIndex = 0; funderIndex < funders.length; funderIndex = funderIndex ++ ) {\n                address funder = funders[funderIndex];\n                addressToAmountFunded[funder] = 0;\n        }\n        //reset the array\n        funders = new address[] (0);\n        // actually withdraw the funds\n\n        // //transfer\n        // //msg.sender = address\n        // // payable(msg.sender) = payable address\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // //send\n        // bool sendSuccess = payable(msg.sender).send(address(thus).balance);\n        // require(sendSuccess, \"send failed\");\n\n        // //call\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed\");\n    }\n\n    modifier onlyOwner {\n        // _; putting above does the execution of function and check the condition after that\n        //require(msg.sender == i_owner, \"sender is not owner\");\n        if(msg.sender != i_owner) { revert NotOwner(); }\n        _; // putting _ here checks for condition first then only executes the function\n    }\n\n    //what happens if someone sends this contract eth without calling the fund function\n\n    receive() external payable {\n        fund();\n    }\n    fallback() external payable {\n        fund();\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\"; //importing the contracts directly from github/npm.\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        //abi\n        //address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        // );\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // eth in terms of usd\n        // 1080.00000000 8 decimal places (we have to match the values with above requirement)\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}